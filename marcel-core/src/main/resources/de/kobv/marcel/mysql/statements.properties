dropDatabase=DROP DATABASE IF EXISTS <dataSource>

dropTables=SELECT concat('DROP TABLE IF EXISTS ', table_schema, '.', table_name, ';') FROM information_schema.tables \
  WHERE table_schema = '<dataSource>';

createDatabase=CREATE DATABASE IF NOT EXISTS <dataSource> CHARACTER SET utf8

createRecordTable=CREATE TABLE IF NOT EXISTS <dataSource>.record (\
  uid varchar(30) NOT NULL PRIMARY KEY, \
  leader char(24) NOT NULL, \
  has_library_y_n char(1) NOT NULL DEFAULT 'n', \
  valid_y_n char(1) NOT NULL DEFAULT 'y'\
  ) ENGINE=InnoDB

createNonValidTable=CREATE TABLE IF NOT EXISTS <dataSource>.non_valid (\
  uid varchar(30) NOT NULL PRIMARY KEY, \
  validation_message text, \
  invalid_xml mediumtext \
  ) ENGINE=InnoDB

createUidTable=CREATE TABLE IF NOT EXISTS <dataSource>.all_uids (\
  uid varchar(30) NOT NULL PRIMARY KEY \
  ) ENGINE=InnoDB

createControlfieldTable=CREATE TABLE IF NOT EXISTS  <dataSource>.controlfield (\
  id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, \
  uid varchar(30) NOT NULL, \
  tag char(3) NOT NULL, \
  value varchar(100), \
  CONSTRAINT FOREIGN KEY control_uid_fk (uid) REFERENCES <dataSource>.record(uid) ON DELETE CASCADE \
  ) ENGINE=InnoDB

createFieldsTable=CREATE TABLE IF NOT EXISTS <dataSource>.fields (\
  field varchar(6) NOT NULL PRIMARY KEY, \
  allocation INT UNSIGNED, \
  multival_alloc INT UNSIGNED \
  ) ENGINE=InnoDB COLLATE utf8_bin

createCategoriesTable=CREATE TABLE IF NOT EXISTS <dataSource>.categories (\
  cat varchar(30) NOT NULL PRIMARY KEY, \
  field varchar(6) NOT NULL, \
  allocation INT UNSIGNED, \
  multival_alloc INT UNSIGNED, \
  CONSTRAINT FOREIGN KEY cat_field_fk (field) REFERENCES <dataSource>.fields(field)  ON DELETE CASCADE \
  ) ENGINE=InnoDB COLLATE utf8_bin

createTrashTable=CREATE TABLE IF NOT EXISTS <dataSource>.trash ( \
  id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, \
  xml mediumtext NOT NULL \
  ) ENGINE=InnoDB

grantSelect=GRANT SELECT ON <dataSource>.* TO 'kobv'@'localhost'

# Statistics

numRecords=REPLACE INTO <dataSource>.fields (field, allocation) SELECT 'record', COUNT(uid) FROM <dataSource>.record

categories=SELECT cat, field, definition FROM metadata.category_definitions WHERE cat_type = ?

a2categories=SELECT DISTINCT value FROM <dataSource>.subfields_<tag> WHERE code='2'

prefixCatAllocation=REPLACE INTO <dataSource>.categories (cat, field, allocation, multival_alloc) \
  SELECT '<cat>', '<field>', COUNT(DISTINCT uid), (\
    SELECT COUNT(uid) \
      FROM (SELECT uid, COUNT(value) AS count FROM <dataSource>.subfields_<tag> WHERE code=? AND value LIKE ? GROUP BY uid) t \
        WHERE count >1) \
        FROM <dataSource>.subfields_<tag> WHERE code = ? AND value LIKE ?

getA2CatAllocation=REPLACE INTO <dataSource>.categories (cat, field, allocation, multival_alloc) \
 SELECT '<cat>', '<field>', COUNT(DISTINCT uid), (\
   SELECT COUNT(uid)\
    FROM (\
     SELECT uid, COUNT(value) AS count\
      FROM <dataSource>.subfields_<tag>\
      WHERE code='a' \
       AND (uid, tag_idx) IN \
        (SELECT uid, tag_idx\
          FROM <dataSource>.subfields_<tag> \
          WHERE code='2' \
          AND value=?)\
      GROUP BY uid \
      ) t \
    WHERE count > 1) \
  FROM <dataSource>.subfields_<tag> \
  WHERE code='2' \
  AND value=?

# Import

insertRecordString=INSERT INTO <dataSource>.record (uid, leader) VALUES
recordPlaceholders=(?, ?)
insertControlString = "INSERT INTO <dataSource>.controlfield (uid, tag, value) VALUES ";
controlPlaceholders = "(?, ?, ?)";
insertSubfield = "INSERT INTO <dataSource>.subfields_<datafield> (uid, tag_idx, ind1, ind2, code, value) VALUES ";
subPlaceholders = "(?, ?, ?, ?, ?, ?),";
deleteRecord = DELETE FROM <dataSource>.record WHERE uid = ?;
insertTrash = INSERT INTO <dataSource>.trash (xml) VALUES;

createSubfieldTable=CREATE TABLE IF NOT EXISTS <dataSource>.<table> (\
  id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\
  uid varchar(30) NOT NULL,\
  tag_idx smallint NOT NULL,\
  ind1 char(1),\
  ind2 char(1),\
  code char(2) NOT NULL,\
  value varchar(5000),\
  CONSTRAINT FOREIGN KEY <table>_uid_fk (uid) REFERENCES <dataSource>.record(uid) ON DELETE CASCADE\
  ) ENGINE=InnoDB

